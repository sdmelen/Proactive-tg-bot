from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
from telegram import Update
import datetime
import os, codecs
from config.config import BotConfig
from modules.student_data_service import StudentDataService, StudentProgress
from modules.gpt_service import GPTService
from modules.logger import BotLogger
from services.database_service import DatabaseService

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_EMAIL = 1

class TelegramBot:
    def __init__(self, config: BotConfig):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        self.logger = BotLogger(config.log_directory)
        self.logger.log_bot_startup(config.__dict__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(config.bot_key).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = config
        
        #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–∏ –±–æ—Ç–∞
        self.role = self._load_role()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.student_service = StudentDataService(self.logger)
        self.gpt_service = GPTService(config, self.logger)
        self.db_service = DatabaseService()  #—Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_handlers()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        self.logger.logger.info('Bot initialization completed successfully')
        print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')
        print(f'–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é {self.config.update_interval} –º–∏–Ω—É—Ç—É')
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        self.application.run_polling(1.0)
    

    def _get_status_level(self, expected_result: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ expected_result"""
        if expected_result > 3:
            return "Superior"
        elif 0 <= expected_result <= 3:
            return "On track"
        elif -4 <= expected_result < 0:
            return "Small Problems"
        elif -10 <= expected_result < -4:
            return "Problems"
        else:  # expected_result < -10
            return "Critical Gap"

    def _generate_progress_prompt(self, expected_result: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ expected_result"""

        status = self._get_status_level(expected_result)
        if status == "Superior":
            return (
                #f"Student has Expected Result = {expected_result}. "
                "Student has Result = Superior"
                "They are EXCELLING! üåü Act extremely excited and proud! "
                "Use phrases like 'You're absolutely crushing it!' and 'You're becoming a legend!' "
                "Compare them to successful African tech leaders. "
                "Your tone should be energetic and thrilled - this student is a future leader. "
                "Push them to become a mentor for others."
            )
        elif status == "On track":
            return (
                "Student has Result = On track"
                "They are ON TRACK! üí™ Be genuinely positive and encouraging. "
                "Use phrases like 'Steady progress!' and 'You're building something great!' "
                "Compare their journey to successful African startups that grew step by step. "
                "Your tone should be warm and supportive - they're doing things right. "
                "Encourage them to maintain this momentum."
            )
        elif status == "Small Problems":
            return (
                f"Student has Result = Small Problems. "
                "They are FALLING BEHIND! ‚ö†Ô∏è Use light warning tone with friendly teasing. "
                "Use phrases like 'Yo, what's happening?' and 'Time to wake up!' "
                "Reference how African tech requires constant hustle and focus. "
                "Your tone should be like a friend who notices their buddy slacking off. "
                "Make them feel slightly uncomfortable but in a friendly way."
            )
        elif status == "Problems":
            return (
                f"Student has Expected Result = Problems. "
                "They are BEHIND! ‚õî Show concern and urgency. "
                "Use phrases like 'This is a serious wake-up call' and 'We need to turn this around now.' "
                "Reference African success stories that started from difficult situations. "
                "Your tone should be like a concerned elder sibling - mix care with tough love. "
                "Create a sense of urgency while offering specific steps to improve."
            )
        else:  # status == Critical Gap
            return (
                f"Student has Expected Result = Critical Gap. "
                "This is a CRITICAL SITUATION! üö® Show maximum concern and authority. "
                "Use phrases like 'This stops NOW' and 'Your future cannot wait'. "
                "Speak with the authority of an African elder who sees their child heading towards failure. "
                "Your tone should be deeply concerned but not giving up - tough love at maximum. "
                "Demand immediate change while expressing belief in their potential. "
                "Make them understand this is a defining moment in their journey."
            )
        
    def _setup_handlers(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                WAITING_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.verify_email)]
            },
            fallbacks=[]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(conv_handler)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        job_queue = self.application.job_queue
        job_queue.run_repeating(
            self.periodic_update,
            interval=datetime.timedelta(minutes=self.config.update_interval),
            first=datetime.timedelta(seconds=10)
        )


    def _load_role(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–∏ –±–æ—Ç–∞"""
        try:
            role_path = os.path.join(os.getcwd(), self.config.role_file)
            with codecs.open(role_path, 'r', encoding='utf-8') as file:
                return file.read().strip()
        except Exception as e:
            print(f"Error loading role: {str(e)}")
            return "You are a friendly African student assistant"
    

    async def start(self, update: Update, context) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.message.chat_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = self.db_service.get_user_by_chat_id(chat_id)
        if user and user.verified:
            current_email = self.user_verified[chat_id]["email"]
            await update.message.reply_text(
                f"You are already verified with email: {current_email}\n"
                "You cannot change your email once verified. If you need to change your email, please contact support."
            )
            return ConversationHandler.END
            
        try:
            messages = [
                {"role": "system", "content": self.role},
                {"role": "user", "content": "Greet the new student and ask him to introduce himself by specifying his email address, which was used when registering for the course"}
            ]
            
            response = self.gpt_service.get_gpt_response(messages)
            await update.message.reply_text(response)
        except Exception as e:
            self.logger.logger.error(f"Start command error: {str(e)}")
            await update.message.reply_text(
                "Heyoo, fam! üåç Welcome to your learning journey! I'm your digital mentor - think of me as that tech-savvy cousin who's got your back in studies."
                "Drop your course registration email below and let's get this show on the road! üí™"
            )
        
        return WAITING_EMAIL

    async def verify_email(self, update: Update, context) -> int:
        chat_id = update.message.chat_id
        email = update.message.text.strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = self.db_service.get_user_by_chat_id(chat_id)
        if existing_user and existing_user.verified:
            await update.message.reply_text(
                f"Your Telegram account is already verified with email: {existing_user.email}\n"
                "You cannot change your email once verified."
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç email
        email_user = self.db_service.get_user_by_email(email)
        if email_user:
            await update.message.reply_text(
                "This email is already verified with another Telegram account.\n"
                "Each email can only be used with one Telegram account.\n"
                "If you believe this is an error, please contact support."
            )
            return WAITING_EMAIL

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_data = self.student_service.get_student_progress(email)
        
        if student_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db_service.save_user(chat_id=chat_id, email=email)
            self.logger.log_user_verification(chat_id, email, True)
            
            try:
                status = self._get_status_level(student_data.expected_result)
                progress_prompt = self._generate_progress_prompt(student_data.expected_result)
                messages = [
                    {"role": "system", "content": self.role},
                    {"role": "user", "content": progress_prompt}
                ]
                response = self.gpt_service.get_gpt_response(messages)
                
                await update.message.reply_text(
                    f"Level check complete! ‚ú®\n"
                    f"Your status = {status}\n\n"
                    f"{response}"
                )
                
            except Exception as e:
                self.logger.logger.error(f"Error during verification: {str(e)}")
                await update.message.reply_text(
                    "An error occurred. Please try again later."
                )
            
            return ConversationHandler.END
            
        else:
            self.logger.log_user_verification(chat_id, email, False)
            await update.message.reply_text(
                "Email not found or student is not active. "
                "Please check your email and try again."
            )
            return WAITING_EMAIL
        

    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update.message.chat_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user = self.db_service.get_user_by_chat_id(chat_id)
        if not user or not user.verified:
            await update.message.reply_text(
                "Please first introduce yourself using the /start command."
            )
            return

        started = datetime.datetime.now()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db_service.save_message(
            chat_id=chat_id,
            message_id=update.message.message_id,
            user_id=update.message.from_user.id,
            role='user',
            content=update.message.text
        )

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            history = self.db_service.get_chat_history(chat_id, self.config.tail)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
            messages = [
                {'role': 'system', 'content': self.role}
            ] + [
                {'role': message.role, 'content': message.content}
                for message in reversed(history)  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è —à–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            ]

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
            response = self.gpt_service.get_gpt_response(messages)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db_service.save_message(
                chat_id=chat_id,
                message_id=update.message.message_id + 1,
                user_id=None,  # –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ user_id –Ω–µ –Ω—É–∂–µ–Ω
                role='assistant',
                content=response
            )

            await update.message.reply_text(response)

        except Exception as e:
            self.logger.logger.error(f"Error in message handling: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "Sorry, an error has occurred. Try to repeat the request later."
            )

    async def periodic_update(self, context):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.logger.info("Starting student data update...")
            if self.student_service.update_data():
                self.logger.logger.info("Student data updated successfully")
            else:
                self.logger.logger.error("Failed to update student data")
        except Exception as e:
            self.logger.logger.error(f"Error during periodic update: {str(e)}", exc_info=True)
    

    async def send_progress_update(self, chat_id: int, student_data: StudentProgress) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç—É"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
            status = self._get_status_level(student_data.expected_result)
            progress_prompt = self._generate_progress_prompt(student_data.expected_result)
            messages = [
                {"role": "system", "content": self.role},
                {"role": "user", "content": f"{progress_prompt} This is an automatic progress update, make the message more personalized."}
            ]
            
            response = self.gpt_service.get_gpt_response(messages)
            
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "üîÑ Progress Update!\n\n"
                f"Your status = {status}\n\n"
                f"{response}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message
            )
            
            self.logger.logger.info(f"Progress update sent to chat_id {chat_id}")
            
        except Exception as e:
            self.logger.logger.error(f"Error sending progress update to chat_id {chat_id}: {str(e)}", exc_info=True)
    

if __name__ == '__main__':
    config = BotConfig()
    bot = TelegramBot(config)